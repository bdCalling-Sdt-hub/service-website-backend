generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  CUSTOMER
  PROVIDER
}

model Users {
  id              String            @id @default(cuid())
  firstName       String
  lastName        String
  email           String            @unique
  password        String
  type            UserType
  image           String?
  mobile          String?
  isDeleted       Boolean           @default(false)
  isVerified      Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  notifications   Notifications[]
  oTPs            OTPs[]
  business        Businesses?
  reviews         Reviews[]
  Communications  Communications[]
  Bits            Bits[]
  JobApplications JobApplications[]
}

model Notifications {
  id        String   @id @default(cuid())
  message   String
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model OTPs {
  id        String   @id @default(cuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  code      String
  expiredAt DateTime
  tryCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscriptions {
  id           String     @id @default(cuid())
  name         String
  price        Float
  minimumStart Int?
  benefits     Json
  priceId      String
  isDeleted    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  payments     Payments[]
}

model Businesses {
  id                String           @id @default(cuid())
  userId            String           @unique
  user              Users            @relation(fields: [userId], references: [id])
  name              String
  phone             String?
  mobile            String
  abn               Int
  license           String?
  openHour          String?
  address           String
  suburb            String
  state             String
  postalCode        String
  latitude          Float
  longitude         Float
  services          Json?
  website           String?
  facebook          String?
  instagram         String?
  about             String?          @db.LongText
  accountNumber     String?
  accountName       String?
  bankName          String?
  bsbNumber         String?
  priorityIndex     Int              @default(0)
  subscriptionEndAt DateTime?
  mainServiceId     String
  mainService       Services         @relation(fields: [mainServiceId], references: [id])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  portfolios        Portfolios[]
  reviews           Reviews[]
  payments          Payments[]
  Communications    Communications[]
  Jobs Jobs[]
}

model Services {
  id          String       @id @default(cuid())
  name        String
  description String
  image       String
  isDeleted   Boolean      @default(false)
  business    Businesses[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Bits        Bits[]
}

model Payments {
  id             String        @id @default(cuid())
  businessId     String
  business       Businesses    @relation(fields: [businessId], references: [id])
  amount         Float
  transactionId  String
  expireAt       DateTime
  subscriptionId String
  subscription   Subscriptions @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Portfolios {
  id         String     @id @default(cuid())
  businessId String
  business   Businesses @relation(fields: [businessId], references: [id])
  name       String
  image      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Reviews {
  id         String     @id @default(cuid())
  businessId String
  business   Businesses @relation(fields: [businessId], references: [id])
  userId     String
  user       Users      @relation(fields: [userId], references: [id])
  rating     Int
  discount   Int
  message    String
  ticketNo   Int        @unique @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model AppData {
  id        String   @id @default(cuid())
  about     String
  privacy   String
  terms     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CommunicationType {
  CALL
  MESSAGE
}

enum CommunicationStatus {
  PENDING
  SENDED
  REVIEWED
}

model Communications {
  id         String              @id @default(cuid())
  type       CommunicationType
  status     CommunicationStatus @default(PENDING)
  message    String?
  businessId String
  business   Businesses          @relation(fields: [businessId], references: [id])
  userId     String?
  user       Users?              @relation(fields: [userId], references: [id])
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

model Suburbs {
  id        String @id @default(cuid())
  name      String
  postcode  String
  latitude  Float
  longitude Float
}

enum CommunicationPreference {
  email
  call
}

model Bits {
  id                      String                  @id @default(cuid())
  userId                  String
  user                    Users                   @relation(fields: [userId], references: [id])
  serviceId               String
  service                 Services                @relation(fields: [serviceId], references: [id])
  description             String
  image                   String?
  latitude                Float
  longitude               Float
  communicationPreference CommunicationPreference
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
}

model Jobs {
  id              String            @id @default(cuid())
  businessId      String
  business        Businesses        @relation(fields: [businessId], references: [id])
  title           String
  description     String
  email           String
  phone           String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  JobApplications JobApplications[]
}

model JobApplications {
  id        String   @id @default(cuid())
  jobId     String
  job       Jobs     @relation(fields: [jobId], references: [id])
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  resume    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
