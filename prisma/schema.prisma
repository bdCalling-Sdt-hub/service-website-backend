generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  CUSTOMER
  PROVIDER
}

model Users {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  email         String          @unique
  password      String
  type          UserType
  image         String?
  mobile        String?
  isVerified    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  notifications Notifications[]
  oTPs          OTPs[]
  business      Businesses?
  reviews       Reviews[]
  messages      messages[]
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model OTPs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      Users    @relation(fields: [userId], references: [id])
  code      String
  expiredAt DateTime
  tryCount  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscriptions {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Float
  minimumStart Int
  Benefits     String[]
  isDeleted    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  payments     Payments[]
}

model Businesses {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @unique @db.ObjectId
  user              Users        @relation(fields: [userId], references: [id])
  name              String
  phone             String?
  mobile            String
  abn               Int
  license           String?
  openHour          String
  address           String
  city              String
  state             String
  postalCode        String
  services          String[]
  website           String?
  facebook          String?
  instagram         String?
  about             String
  isDeleted         Boolean      @default(false)
  priorityIndex     Int          @default(0)
  subscriptionEndAt DateTime?
  mainServiceId     String       @db.ObjectId
  mainService       Services     @relation(fields: [mainServiceId], references: [id])
  portfolios        Portfolios[]
  reviews           Reviews[]
  Payments          Payments[]
}

model Services {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  description String
  image       String
  isDeleted   Boolean      @default(false)
  business    Businesses[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Payments {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  businessId     String        @db.ObjectId
  business       Businesses    @relation(fields: [businessId], references: [id])
  amount         Float
  transactionId  String
  expireAt       DateTime
  subscriptionId String        @db.ObjectId
  subscription   Subscriptions @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Portfolios {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  businessId String     @db.ObjectId
  business   Businesses @relation(fields: [businessId], references: [id])
  name       String
  image      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Reviews {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  businessId String     @db.ObjectId
  business   Businesses @relation(fields: [businessId], references: [id])
  userId     String     @db.ObjectId
  user       Users      @relation(fields: [userId], references: [id])
  rating     Int
  message    String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model messages {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  message     String
  bussniessId String   @db.ObjectId
  userId      String   @db.ObjectId
  user        Users    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}
